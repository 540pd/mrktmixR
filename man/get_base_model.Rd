% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_base.R
\name{get_base_model}
\alias{get_base_model}
\title{Iteratively Refine Linear Model by Dropping Variables}
\usage{
get_base_model(
  lm_model,
  model_data,
  expected_pos_sign,
  critical_pvalue,
  critical_vif,
  flexi_vars,
  run_up_to_flexi_vars,
  drop_pvalue_precision,
  discard_estimate_sign,
  drop_highest_estimate,
  defer_intercept_test,
  always_check_vif
)
}
\arguments{
\item{lm_model}{A linear model object (of class \code{\link[stats]{lm}}).}

\item{model_data}{Dataset used for fitting the \code{lm_model}.}

\item{expected_pos_sign}{Named numeric vector indicating the expected sign for each variable.}

\item{critical_pvalue}{Named numeric vector indicating critical p-value threshold for determining variable significance.}

\item{critical_vif}{Named numeric vector indicating critical VIF threshold for assessing multicollinearity.}

\item{flexi_vars}{Character vector of variable names considered as flexible in the model.}

\item{run_up_to_flexi_vars}{Integer; number of flexible variables to consider for retention.}

\item{drop_pvalue_precision}{Integer; number of decimal places to round the p-values to.}

\item{discard_estimate_sign}{Logical; if TRUE, the sign of the estimates is disregarded.}

\item{drop_highest_estimate}{Logical; if TRUE, the variable with the highest estimate is dropped.}

\item{defer_intercept_test}{Logical; if TRUE, the intercept test is deferred.}

\item{always_check_vif}{Logical; if TRUE, VIF is always checked.}
}
\value{
A list containing two elements: a list of linear model objects after each iteration
and a list of VIF values for each iteration.
}
\description{
This function iteratively updates a linear model by dropping variables based on several
criteria such as expected sign of coefficients, critical p-values, and VIF (Variance
Inflation Factor). Variables are dropped until no more meet the criteria for exclusion,
refining the model at each step.
}
\examples{
\dontrun{
  # Assuming lm_model and model_data are predefined
  expected_pos_sign <- c(var1 = 1, var2 = -1) # Example
  result <- get_base_model(lm_model, model_data, expected_pos_sign, 0.05, 5,
                           c("var1", "var2"), 10, 2, TRUE, FALSE, FALSE, TRUE)
}
}
